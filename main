import collections
import csv
import datetime
import json

import selenium
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.chrome.options import Options

opts = Options()
opts.headless = True

browser = selenium.webdriver.Chrome(options=opts, executable_path="chromedriver.exe")


class FieldHashCollection(object):
    def __init__(self):
        self._contents = []  # todo make readonly property
        self.dict = collections.defaultdict(lambda: collections.defaultdict(list))

    def append(self, input):
        self._contents.append(input)
        self._add_to_dict(input)

    def _add_to_dict(self, input: input):
        for key, value in input.__dict__.items():
            self.dict[key][value].append(input)


class CardData(object):
    def __init__(self, set_num, card_num, name):
        self.set_num = set_num
        self.card_num = card_num
        self.name = name
        self.play_rate = None
        self.last_updated = None

    def __str__(self):
        return f"{self.name} - {self.set_num}, {self.card_num}"

    def __lt__(self, other):
        return self.play_rate < other.play_rate

    def __eq__(self, other):
        return self.play_rate == other.play_rate


def save_play_rates(play_rates):
    writer = csv.writer(open("output.csv", "w"))
    for item in play_rates:
        writer.writerow([item[0], item[1]])


class CardLearner(object):
    def __init__(self, file_prefix):
        self.file_prefix = file_prefix
        self.raw_path = f"{self.file_prefix}/raw.json"
        self.all_cards = self._load_cards()

    def update(self):
        self.find_new_cards()
        self.update_card_win_rates()
        self._save_cards()

    def find_new_cards(self):
        starting_set_nums = [0, 1001]

        for starting_set_num in starting_set_nums:
            set_num = starting_set_num
            while True:
                num_cards_found = self._find_new_cards_in_set(set_num)
                if num_cards_found == 0:
                    break
                set_num += 1

    def update_card_win_rates(self):
        save_counter = 0
        unsaved_limit = 25
        for card in self.all_cards._contents:
            play_rate = self.get_tournament_decks_60_days_from_id(card.set_num, card.card_num)
            card.last_updated = datetime.datetime.now()
            card.play_rate = play_rate
            save_counter += 1
            if save_counter >= unsaved_limit:
                save_counter = 0
                self._save_cards()

    def get_tournament_decks_60_days_from_id(self, set_num, card_num):
        url = f"https://eternalwarcry.com/decks?dt=1&td=1&mdb=75&ic={set_num}-{card_num}"
        browser.get(url)

        try:
            pagination_info = browser.find_element_by_class_name("pagination-info").text
            pagination_info = pagination_info.split(" ")
            num_decks = int(pagination_info[-1])
        except NoSuchElementException:
            decks = browser.find_elements_by_class_name("deck-listing-standard")
            num_decks = len(decks)

        return num_decks

    def _find_new_cards_in_set(self, set_num):
        card_num = 1

        fails = 0
        cards_found = 0
        while True:
            card_exists = self._get_card_exists(set_num, card_num)
            if card_exists:
                card_num += 1
                continue

            card_name = self._get_card_name_from_id(set_num, card_num)
            if card_name is None:
                fails += 1
                if fails >= 5:
                    self._save_cards()
                    return cards_found
            else:
                fails = 0
                cards_found += 1
                print(set_num, card_num, card_name)
                card = CardData(set_num, card_num, card_name)
                self.all_cards.append(card)
            card_num += 1

    def _get_card_exists(self, set_num, card_num):
        cards_with_number = self.all_cards.dict["card_num"][card_num]
        cards_with_number_in_set = [card for card in cards_with_number if card.set_num == set_num]
        return len(cards_with_number_in_set) > 0

    def _get_card_name_from_id(self, set_num, card_num):
        url = f"https://eternalwarcry.com/cards/details/{set_num}-{card_num}"
        browser.get(url)

        title = browser.find_element_by_css_selector('#body-wrapper > div > h1').text
        if title == "Sorry, an error occured on our end.":
            return None
        else:
            return title

    def _load_cards(self) -> FieldHashCollection:
        cards = FieldHashCollection()
        with open(self.raw_path) as json_file:
            json_cards = json.load(json_file)
        for json_card in json_cards:
            card = CardData(json_card['set_num'], json_card['card_num'], json_card['name'])
            card.play_rate = json_card['play_rate']
            card.last_updated = json_card['last_updated']
            cards.append(card)

        return cards

    def _save_cards(self):
        def encode(obj):
            if isinstance(obj, datetime.datetime):
                return obj.isoformat()
            else:
                return obj.__dict__

        self._sort_cards()
        with open(self.raw_path, "w") as file:
            json.dump(self.all_cards._contents, file, indent=4, sort_keys=True, default=encode)

    def _sort_cards(self):
        self.all_cards._contents = sorted(self.all_cards._contents, reverse=True)


file_prefix = "test"

card_learner = CardLearner(file_prefix)
card_learner._save_cards()
# card_learner.update()

# set_num = 4
# card_num = 249
#
# print(_get_card_name_from_id(set_num, card_num))
# print(get_tournament_decks_60_days_from_id(set_num, card_num))

browser.close()
