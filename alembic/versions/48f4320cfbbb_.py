"""empty message

Revision ID: 48f4320cfbbb
Revises: 
Create Date: 2019-09-06 23:24:30.466130

"""
from alembic import op

# revision identifiers, used by Alembic.
revision = "48f4320cfbbb"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    pass  # This is handled by flask's first time setup.
    # # ### commands auto generated by Alembic - please adjust! ###
    # CARDS_SET_NUMBER = 'cards.SetNumber'
    # CARDS_ETERNAL_ID = 'cards.EternalID'
    #
    # try:
    #     op.create_table('card_set_name',
    #                     sa.Column('set_num', sa.Integer),
    #                     sa.Column('name', sa.String(length=100)),
    #                     sa.PrimaryKeyConstraint('id')
    #                     )
    # except sqlalchemy.exc.InternalError:
    #     pass
    #
    # try:
    #     op.create_table('deck_searches',
    #                     sa.Column('id', sa.Integer(), nullable=False),
    #                     sa.Column('maximum_age_days', sa.Integer(), nullable=True),
    #                     sa.PrimaryKeyConstraint('id')
    #                     )
    # except sqlalchemy.exc.InternalError:
    #     pass
    # try:
    #     op.create_table('decks',
    #                     sa.Column('id', sa.String(length=100), nullable=False),
    #                     sa.Column('archetype',
    #                               sa.Enum('unknown', 'aggro', 'midrange', 'combo',
    #                                       'control', 'tempo', 'aggro_control',
    #                                       'aggro_combo', 'aggro_midrange',
    #                                       'control_combo', 'control_midrange',
    #                                       'tempo_combo', 'tempo_control',
    #                                       'combo_midrange', name='archetype'),
    #                               nullable=True),
    #                     sa.Column('date_added', sa.DateTime(), nullable=True),
    #                     sa.Column('date_updated', sa.DateTime(), nullable=True),
    #                     sa.Column('deck_type',
    #                               sa.Enum('unknown', 'standard', 'draft', 'gauntlet',
    #                                       'forge', 'campaign', 'event', '_',
    #                                       'expedition', name='decktype'),
    #                               nullable=True),
    #                     sa.Column('description', sa.Text(), nullable=True),
    #                     sa.Column('patch', sa.String(length=10), nullable=True),
    #                     sa.Column('username', sa.String(length=30), nullable=True),
    #                     sa.Column('views', sa.Integer(), nullable=True),
    #                     sa.Column('rating', sa.Integer(), nullable=True),
    #                     sa.PrimaryKeyConstraint('id')
    #                     )
    # except sqlalchemy.exc.InternalError:
    #     pass
    # try:
    #     op.create_table('rarities',
    #                     sa.Column('Name', sa.String(length=9), nullable=False),
    #                     sa.Column('NumInPack', sa.Float(), nullable=False),
    #                     sa.Column('Enchant', sa.Integer(), nullable=False),
    #                     sa.Column('Disenchant', sa.Integer(), nullable=False),
    #                     sa.Column('FoilEnchant', sa.Integer(), nullable=False),
    #                     sa.Column('FoilDisenchant', sa.Integer(), nullable=False),
    #                     sa.PrimaryKeyConstraint('Name')
    #                     )
    # except sqlalchemy.exc.InternalError:
    #     pass
    # try:
    #     op.create_table('users',
    #                     sa.Column('id', sa.Integer(), autoincrement=True,
    #                               nullable=False),
    #                     sa.Column('name', sa.String(length=40), nullable=True),
    #                     sa.Column('key',
    #                               sqlalchemy_utils.types.encrypted.encrypted_type.EncryptedType(),
    #                               nullable=True),
    #                     sa.PrimaryKeyConstraint('id')
    #                     )
    # except sqlalchemy.exc.InternalError:
    #     pass
    # try:
    #     op.create_table('cards',
    #                     sa.Column('SetNumber', sa.Integer(), nullable=False),
    #                     sa.Column('EternalID', sa.Integer(), nullable=False),
    #                     sa.Column('Name', sa.String(length=40), nullable=False),
    #                     sa.Column('Rarity', sa.String(length=9), nullable=False),
    #                     sa.Column('ImageUrl', sa.String(length=100), nullable=False),
    #                     sa.Column('DetailsUrl', sa.String(length=100), nullable=False),
    #                     sa.ForeignKeyConstraint(['Rarity'], ['rarities.Name'], ),
    #                     sa.PrimaryKeyConstraint('SetNumber', 'EternalID'),
    #                     sa.UniqueConstraint('DetailsUrl'),
    #                     sa.UniqueConstraint('ImageUrl'),
    #                     sa.UniqueConstraint('Name')
    #                     )
    # except sqlalchemy.exc.InternalError:
    #     pass
    # try:
    #     op.create_table('weighted_deck_search',
    #                     sa.Column('deck_search_id', sa.Integer(), nullable=False),
    #                     sa.Column('user_id', sa.Integer(), nullable=True),
    #                     sa.Column('name', sa.String(length=20), nullable=False),
    #                     sa.Column('weight', sa.Float(), nullable=True),
    #                     sa.ForeignKeyConstraint(['deck_search_id'],
    #                                             ['deck_searches.id'], ),
    #                     sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    #                     sa.PrimaryKeyConstraint('deck_search_id', 'name')
    #                     )
    # except sqlalchemy.exc.InternalError:
    #     pass
    # try:
    #     op.create_table('deck_has_card',
    #                     sa.Column('deck_id', sa.String(length=100), nullable=False),
    #                     sa.Column('set_num', sa.Integer(), nullable=False),
    #                     sa.Column('card_num', sa.Integer(), nullable=False),
    #                     sa.Column('num_played', sa.Integer(), nullable=False),
    #                     sa.ForeignKeyConstraint(['deck_id'], ['decks.id'], ),
    #                     sa.ForeignKeyConstraint(['set_num', 'card_num'],
    #                                             [CARDS_SET_NUMBER,
    #                                              CARDS_ETERNAL_ID], ),
    #                     sa.PrimaryKeyConstraint('deck_id', 'set_num', 'card_num')
    #                     )
    # except sqlalchemy.exc.InternalError:
    #     pass
    #
    #
    #
    # try:
    #     op.create_table('deck_search_has_card',
    #                     sa.Column('decksearch_id', sa.Integer(), nullable=False),
    #                     sa.Column('set_num', sa.Integer(), nullable=False),
    #                     sa.Column('card_num', sa.Integer(), nullable=False),
    #                     sa.Column('count_in_deck', sa.Integer(), nullable=False),
    #                     sa.Column('num_decks_with_count_or_less', sa.Integer(),
    #                               nullable=False),
    #                     sa.ForeignKeyConstraint(['decksearch_id'],
    #                                             ['deck_searches.id'], ),
    #                     sa.ForeignKeyConstraint(['set_num', 'card_num'],
    #                                             [CARDS_SET_NUMBER,
    #                                              CARDS_ETERNAL_ID], ),
    #                     sa.PrimaryKeyConstraint('decksearch_id', 'set_num', 'card_num',
    #                                             'count_in_deck')
    #                     )
    # except sqlalchemy.exc.InternalError:
    #     pass
    # try:
    #     op.create_table('user_owns_card',
    #                     sa.Column('user_id', sa.Integer(), nullable=False),
    #                     sa.Column('set_num', sa.Integer(), nullable=False),
    #                     sa.Column('card_num', sa.Integer(), nullable=False),
    #                     sa.Column('count', sa.Integer(), nullable=False),
    #                     sa.ForeignKeyConstraint(['set_num', 'card_num'],
    #                                             [CARDS_SET_NUMBER,
    #                                              CARDS_ETERNAL_ID], ),
    #                     sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    #                     sa.PrimaryKeyConstraint('user_id', 'set_num', 'card_num')
    #                     )
    # except sqlalchemy.exc.InternalError:
    #     pass
    # ### end Alembic commands ###


def downgrade():
    op.drop_table("card_set_names")
    op.drop_table("user_owns_card")
    op.drop_table("deck_search_has_card")
    op.drop_table("deck_has_card")
    op.drop_table("weighted_deck_search")
    op.drop_table("cards")
    op.drop_table("users")
    op.drop_table("rarities")
    op.drop_table("decks")
    op.drop_table("deck_searches")
    # ### end Alembic commands ###
